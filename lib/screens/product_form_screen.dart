
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:umayumcha/controllers/inventory_controller.dart';
import 'package:umayumcha/controllers/branch_controller.dart'; // Import BranchController
import 'package:umayumcha/models/product_model.dart';
import 'package:umayumcha/models/branch_model.dart'; // Import Branch model

class ProductFormScreen extends StatefulWidget {
  const ProductFormScreen({super.key});

  @override
  State<ProductFormScreen> createState() => _ProductFormScreenState();
}

class _ProductFormScreenState extends State<ProductFormScreen> {
  final InventoryController inventoryController = Get.find();
  final BranchController branchController = Get.find();

  final TextEditingController nameController = TextEditingController();
  final TextEditingController descriptionController = TextEditingController();
  final TextEditingController skuController = TextEditingController();
  final TextEditingController priceController = TextEditingController();
  final TextEditingController initialQuantityController = TextEditingController();

  Branch? selectedBranch; // To select the branch for initial stock

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add New Product')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: nameController,
              decoration: const InputDecoration(labelText: 'Product Name'),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: descriptionController,
              decoration: const InputDecoration(labelText: 'Description (Optional)'),
              maxLines: 3,
            ),
            const SizedBox(height: 16),
            TextField(
              controller: skuController,
              decoration: const InputDecoration(labelText: 'SKU (Optional)'),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: priceController,
              decoration: const InputDecoration(labelText: 'Price (Optional)'),
              keyboardType: TextInputType.numberWithOptions(decimal: true),
            ),
            const SizedBox(height: 16),
            // Branch Selection for Initial Stock
            Obx(() {
              if (branchController.isLoading.value) {
                return const CircularProgressIndicator();
              }
              if (branchController.branches.isEmpty) {
                return const Text('No branches available. Please add a branch first.');
              }
              return DropdownButtonFormField<Branch>(
                decoration: const InputDecoration(labelText: 'Initial Stock Branch'),
                value: selectedBranch,
                onChanged: (Branch? newValue) {
                  setState(() {
                    selectedBranch = newValue;
                  });
                },
                items: branchController.branches.map((branch) {
                  return DropdownMenuItem<Branch>(
                    value: branch,
                    child: Text(branch.name),
                  );
                }).toList(),
              );
            }),
            const SizedBox(height: 16),
            TextField(
              controller: initialQuantityController,
              decoration: const InputDecoration(labelText: 'Initial Quantity'),
              keyboardType: TextInputType.number,
            ),
            const SizedBox(height: 24),
            Obx(() {
              return inventoryController.isLoading.value
                  ? const CircularProgressIndicator()
                  : ElevatedButton(
                      onPressed: () async {
                        if (nameController.text.trim().isEmpty) {
                          Get.snackbar('Error', 'Product Name cannot be empty.');
                          return;
                        }
                        if (selectedBranch == null) {
                          Get.snackbar('Error', 'Please select a branch for initial stock.');
                          return;
                        }
                        final int? initialQuantity = int.tryParse(initialQuantityController.text.trim());
                        if (initialQuantity == null || initialQuantity < 0) {
                          Get.snackbar('Error', 'Please enter a valid initial quantity.');
                          return;
                        }

                        // 1. Add the master product
                        final newProduct = Product(
                          id: '', // ID will be generated by Supabase
                          name: nameController.text.trim(),
                          description: descriptionController.text.trim(),
                          sku: skuController.text.trim(),
                          price: double.tryParse(priceController.text.trim()),
                          createdAt: DateTime.now(),
                        );
                        
                        // Call addProduct and get the newly created product ID
                        final String? newProductId = await inventoryController.addProductAndGetId(newProduct);

                        if (newProductId != null) {
                          // 2. Add initial stock transaction for the selected branch
                          await inventoryController.addTransaction(
                            productId: newProductId,
                            type: 'in',
                            quantityChange: initialQuantity,
                            reason: 'Initial stock for new product',
                            toBranchId: selectedBranch!.id,
                          );
                          Get.back(); // Close the form screen
                          Get.snackbar('Success', 'Product and initial stock added successfully!');
                        } else {
                          Get.snackbar('Error', 'Failed to add product.');
                        }
                      },
                      child: const Text('Save Product'),
                    );
            }),
          ],
        ),
      ),
    );
  }
}
